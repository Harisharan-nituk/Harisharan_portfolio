{"ast":null,"code":"// frontend/src/services/api.js\nimport axios from 'axios';\n\n// Get the API URL from environment variables, with a fallback for development\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/*\n  Optional: Add a request interceptor to include a token for protected routes\n  if you implement authentication later.\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token'); // Or however you store your token\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n*/\n\n/*\n  Optional: Add a response interceptor to handle global errors,\n  like 401 unauthorized errors, etc.\n\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      // Handle unauthorized access, e.g., redirect to login\n      // localStorage.removeItem('token');\n      // window.location.href = '/login';\n      console.error(\"Unauthorized request or token expired.\");\n    }\n    return Promise.reject(error);\n  }\n);\n*/\n\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers"],"sources":["/Users/harisharan/Desktop/portfolio_py/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\nimport axios from 'axios';\n\n// Get the API URL from environment variables, with a fallback for development\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n/*\n  Optional: Add a request interceptor to include a token for protected routes\n  if you implement authentication later.\n\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token'); // Or however you store your token\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n*/\n\n/*\n  Optional: Add a response interceptor to handle global errors,\n  like 401 unauthorized errors, etc.\n\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      // Handle unauthorized access, e.g., redirect to login\n      // localStorage.removeItem('token');\n      // window.location.href = '/login';\n      console.error(\"Unauthorized request or token expired.\");\n    }\n    return Promise.reject(error);\n  }\n);\n*/\n\nexport default api;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeH,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}