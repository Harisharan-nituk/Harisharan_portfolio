{"ast":null,"code":"var _jsxFileName = \"/Users/harisharan/Desktop/portfolio_py/frontend/src/components/common/ThemeToggleButton.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/common/ThemeToggleButton.js\nimport React, { useEffect, useState } from 'react';\nimport { useTheme } from '../../contexts/ThemeContext'; // Adjust path if your ThemeContext is elsewhere\nimport { Sun, Moon } from 'lucide-react'; // Icons from lucide-react\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeToggleButton = () => {\n  _s();\n  const {\n    theme,\n    toggleTheme\n  } = useTheme();\n  const [mounted, setMounted] = useState(false);\n\n  // Ensure the component is mounted before rendering UI that depends on the theme\n  // This helps avoid hydration mismatches if the server-rendered HTML (if any)\n  // doesn't match the client-side theme preference from localStorage.\n  // For CRA, this mainly ensures state is ready.\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n  if (!mounted) {\n    // You can return a placeholder or null to avoid rendering mismatch during hydration\n    // For a simple button, returning a styled div to reserve space might be good.\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '2.25rem',\n        height: '2.25rem'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 12\n    }, this); // Same size as button (h-9 w-9)\n  }\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: toggleTheme,\n    \"aria-label\": theme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode',\n    className: \"p-2 rounded-md hover:bg-gray-700 dark:hover:bg-gray-600 text-gray-300 dark:text-gray-400 hover:text-white dark:hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 dark:focus:ring-offset-gray-900 focus:ring-white transition-colors duration-200\",\n    children: theme === 'dark' ? /*#__PURE__*/_jsxDEV(Sun, {\n      className: \"h-5 w-5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this) // Show sun icon in dark mode (to switch to light)\n    : /*#__PURE__*/_jsxDEV(Moon, {\n      className: \"h-5 w-5\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this) // Show moon icon in light mode (to switch to dark)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeToggleButton, \"iaaoD1LWaTNugaH6cPmI/NfxUYo=\", false, function () {\n  return [useTheme];\n});\n_c = ThemeToggleButton;\nexport default ThemeToggleButton;\nvar _c;\n$RefreshReg$(_c, \"ThemeToggleButton\");","map":{"version":3,"names":["React","useEffect","useState","useTheme","Sun","Moon","jsxDEV","_jsxDEV","ThemeToggleButton","_s","theme","toggleTheme","mounted","setMounted","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","onClick","className","children","_c","$RefreshReg$"],"sources":["/Users/harisharan/Desktop/portfolio_py/frontend/src/components/common/ThemeToggleButton.js"],"sourcesContent":["// frontend/src/components/common/ThemeToggleButton.js\nimport React, { useEffect, useState } from 'react';\nimport { useTheme } from '../../contexts/ThemeContext'; // Adjust path if your ThemeContext is elsewhere\nimport { Sun, Moon } from 'lucide-react'; // Icons from lucide-react\n\nconst ThemeToggleButton = () => {\n  const { theme, toggleTheme } = useTheme();\n  const [mounted, setMounted] = useState(false);\n\n  // Ensure the component is mounted before rendering UI that depends on the theme\n  // This helps avoid hydration mismatches if the server-rendered HTML (if any)\n  // doesn't match the client-side theme preference from localStorage.\n  // For CRA, this mainly ensures state is ready.\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  if (!mounted) {\n    // You can return a placeholder or null to avoid rendering mismatch during hydration\n    // For a simple button, returning a styled div to reserve space might be good.\n    return <div style={{ width: '2.25rem', height: '2.25rem' }} />; // Same size as button (h-9 w-9)\n  }\n\n  return (\n    <button\n      onClick={toggleTheme}\n      aria-label={theme === 'dark' ? 'Switch to light mode' : 'Switch to dark mode'}\n      className=\"p-2 rounded-md hover:bg-gray-700 dark:hover:bg-gray-600 text-gray-300 dark:text-gray-400 hover:text-white dark:hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 dark:focus:ring-offset-gray-900 focus:ring-white transition-colors duration-200\"\n    >\n      {theme === 'dark' ? (\n        <Sun className=\"h-5 w-5\" /> // Show sun icon in dark mode (to switch to light)\n      ) : (\n        <Moon className=\"h-5 w-5\" /> // Show moon icon in light mode (to switch to dark)\n      )}\n    </button>\n  );\n};\n\nexport default ThemeToggleButton;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,6BAA6B,CAAC,CAAC;AACxD,SAASC,GAAG,EAAEC,IAAI,QAAQ,cAAc,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM;IAAEC,KAAK;IAAEC;EAAY,CAAC,GAAGR,QAAQ,CAAC,CAAC;EACzC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA;EACA;EACA;EACAD,SAAS,CAAC,MAAM;IACdY,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACD,OAAO,EAAE;IACZ;IACA;IACA,oBAAOL,OAAA;MAAKO,KAAK,EAAE;QAAEC,KAAK,EAAE,SAAS;QAAEC,MAAM,EAAE;MAAU;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC,CAAC;EAClE;EAEA,oBACEb,OAAA;IACEc,OAAO,EAAEV,WAAY;IACrB,cAAYD,KAAK,KAAK,MAAM,GAAG,sBAAsB,GAAG,qBAAsB;IAC9EY,SAAS,EAAC,gSAAgS;IAAAC,QAAA,EAEzSb,KAAK,KAAK,MAAM,gBACfH,OAAA,CAACH,GAAG;MAACkB,SAAS,EAAC;IAAS;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;IAAA,eAE5Bb,OAAA,CAACF,IAAI;MAACiB,SAAS,EAAC;IAAS;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;EAC9B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAEb,CAAC;AAACX,EAAA,CA/BID,iBAAiB;EAAA,QACUL,QAAQ;AAAA;AAAAqB,EAAA,GADnChB,iBAAiB;AAiCvB,eAAeA,iBAAiB;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}