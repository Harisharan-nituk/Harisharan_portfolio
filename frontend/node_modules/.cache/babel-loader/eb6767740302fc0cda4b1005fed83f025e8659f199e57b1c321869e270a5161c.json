{"ast":null,"code":"// portfolio_py/frontend/src/services/skillService.js\nimport api from './api'; // This imports your configured Axios instance from api.js in the same folder\n\nexport const getSkillCategories = async () => {\n  try {\n    const response = await api.get('/skillcategories');\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error('Error fetching skill categories:', error.response ? error.response.data : error.message);\n    throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || new Error('Failed to fetch skill categories');\n  }\n};\nexport const addSkillCategory = async categoryData => {\n  // categoryData will now be just { name: \"New Category Name\" }\n  try {\n    const response = await api.post('/skillcategories', categoryData);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    console.error('Error adding skill category:', error.response ? error.response.data : error.message);\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || new Error('Failed to add skill category');\n  }\n};\nexport const updateSkillCategory = async (categoryId, categoryData) => {\n  // categoryData will now be just { name: \"Updated Category Name\" }\n  try {\n    const response = await api.put(`/skillcategories/${categoryId}`, categoryData);\n    return response.data;\n  } catch (error) {\n    var _error$response3;\n    console.error('Error updating skill category:', error.response ? error.response.data : error.message);\n    throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || new Error('Failed to update skill category');\n  }\n};\n// NEWLY ADDED based on backend capabilities\nexport const deleteSkillCategory = async categoryId => {\n  try {\n    const response = await api.delete(`/skillcategories/${categoryId}`);\n    return response.data; // Or handle based on what your backend returns (e.g., status code)\n  } catch (error) {\n    var _error$response4;\n    console.error(`Error deleting skill category ${categoryId}:`, error.response ? error.response.data : error.message);\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || new Error('Failed to delete skill category');\n  }\n};\nexport const addSkillToCategory = async (categoryId, skillData) => {\n  // skillData should be an object like { name: \"Skill Name\" }\n  // The backend controller for addSkillToCategory expects 'name' in the body.\n  try {\n    const response = await api.post(`/skillcategories/${categoryId}/skills`, skillData);\n    return response.data; // This might be the new skill object or the whole updated category\n  } catch (error) {\n    var _error$response5;\n    console.error(`Error adding skill to category ${categoryId}:`, error.response ? error.response.data : error.message);\n    throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || new Error('Failed to add skill to category');\n  }\n};\n\n// Corrected to pass skillName, which will be used as skillId in the URL path (URL encoded)\nexport const deleteSkillFromCategory = async (categoryId, skillName) => {\n  // Backend route: DELETE /api/skillcategories/:categoryId/skills/:skillId\n  // Backend controller uses req.params.skillName, so skillId in path is treated as skillName\n  try {\n    const response = await api.delete(`/skillcategories/${categoryId}/skills/${encodeURIComponent(skillName)}`);\n    return response.data;\n  } catch (error) {\n    var _error$response6;\n    console.error(`Error deleting skill '${skillName}' from category ${categoryId}:`, error.response ? error.response.data : error.message);\n    throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || new Error('Failed to delete skill from category');\n  }\n};\n\n// The old updateSkill function is intentionally omitted as it's not for the category-based structure.","map":{"version":3,"names":["api","getSkillCategories","response","get","data","error","_error$response","console","message","Error","addSkillCategory","categoryData","post","_error$response2","updateSkillCategory","categoryId","put","_error$response3","deleteSkillCategory","delete","_error$response4","addSkillToCategory","skillData","_error$response5","deleteSkillFromCategory","skillName","encodeURIComponent","_error$response6"],"sources":["/Users/harisharan/Desktop/portfolio_copy/frontend/src/services/skillService.js"],"sourcesContent":["// portfolio_py/frontend/src/services/skillService.js\nimport api from './api'; // This imports your configured Axios instance from api.js in the same folder\n\nexport const getSkillCategories = async () => {\n  try {\n    const response = await api.get('/skillcategories');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching skill categories:', error.response ? error.response.data : error.message);\n    throw error.response?.data || new Error('Failed to fetch skill categories');\n  }\n};\n\nexport const addSkillCategory = async (categoryData) => {\n  // categoryData will now be just { name: \"New Category Name\" }\n  try {\n    const response = await api.post('/skillcategories', categoryData);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding skill category:', error.response ? error.response.data : error.message);\n    throw error.response?.data || new Error('Failed to add skill category');\n  }\n};\n\nexport const updateSkillCategory = async (categoryId, categoryData) => {\n  // categoryData will now be just { name: \"Updated Category Name\" }\n  try {\n    const response = await api.put(`/skillcategories/${categoryId}`, categoryData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating skill category:', error.response ? error.response.data : error.message);\n    throw error.response?.data || new Error('Failed to update skill category');\n  }\n};\n// NEWLY ADDED based on backend capabilities\nexport const deleteSkillCategory = async (categoryId) => {\n  try {\n    const response = await api.delete(`/skillcategories/${categoryId}`);\n    return response.data; // Or handle based on what your backend returns (e.g., status code)\n  } catch (error) {\n    console.error(`Error deleting skill category ${categoryId}:`, error.response ? error.response.data : error.message);\n    throw error.response?.data || new Error('Failed to delete skill category');\n  }\n};\n\nexport const addSkillToCategory = async (categoryId, skillData) => {\n  // skillData should be an object like { name: \"Skill Name\" }\n  // The backend controller for addSkillToCategory expects 'name' in the body.\n  try {\n    const response = await api.post(`/skillcategories/${categoryId}/skills`, skillData); \n    return response.data; // This might be the new skill object or the whole updated category\n  } catch (error) {\n    console.error(`Error adding skill to category ${categoryId}:`, error.response ? error.response.data : error.message);\n    throw error.response?.data || new Error('Failed to add skill to category');\n  }\n};\n\n// Corrected to pass skillName, which will be used as skillId in the URL path (URL encoded)\nexport const deleteSkillFromCategory = async (categoryId, skillName) => {\n  // Backend route: DELETE /api/skillcategories/:categoryId/skills/:skillId\n  // Backend controller uses req.params.skillName, so skillId in path is treated as skillName\n  try {\n    const response = await api.delete(`/skillcategories/${categoryId}/skills/${encodeURIComponent(skillName)}`);\n    return response.data; \n  } catch (error) {\n    console.error(`Error deleting skill '${skillName}' from category ${categoryId}:`, error.response ? error.response.data : error.message);\n    throw error.response?.data || new Error('Failed to delete skill from category');\n  }\n};\n\n// The old updateSkill function is intentionally omitted as it's not for the category-based structure."],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}