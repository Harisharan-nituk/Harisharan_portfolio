{"ast":null,"code":"// frontend/src/services/api.js\nimport axios from 'axios';\n\n// Get the API URL from environment variables, with a fallback for development\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\n * IMPORTANT: The Authorization token is now typically added to api.defaults.headers.common\n * by the AuthContext.js when a user logs in or when the app initializes with a stored token.\n * * Example from AuthContext.js:\n * * useEffect(() => {\n * if (token) {\n * api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n * // ...\n * } else {\n * delete api.defaults.headers.common['Authorization'];\n * }\n * }, [token]);\n * * So, you usually don't need an explicit request interceptor here just for the token\n * if AuthContext is handling it globally for this 'api' instance.\n * If you needed more complex request logic, an interceptor could be added:\n * * api.interceptors.request.use(\n * async (config) => {\n * // const token = localStorage.getItem('token'); // Or get from AuthContext\n * // if (token && !config.headers.Authorization) { // Add only if not already set by AuthContext default\n * //   config.headers.Authorization = `Bearer ${token}`;\n * // }\n * return config;\n * },\n * (error) => {\n * return Promise.reject(error);\n * }\n * );\n */\n\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers"],"sources":["/Users/harisharan/Desktop/portfolio_py/frontend/src/services/api.js"],"sourcesContent":["// frontend/src/services/api.js\nimport axios from 'axios';\n\n// Get the API URL from environment variables, with a fallback for development\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n/**\n * IMPORTANT: The Authorization token is now typically added to api.defaults.headers.common\n * by the AuthContext.js when a user logs in or when the app initializes with a stored token.\n * * Example from AuthContext.js:\n * * useEffect(() => {\n * if (token) {\n * api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n * // ...\n * } else {\n * delete api.defaults.headers.common['Authorization'];\n * }\n * }, [token]);\n * * So, you usually don't need an explicit request interceptor here just for the token\n * if AuthContext is handling it globally for this 'api' instance.\n * If you needed more complex request logic, an interceptor could be added:\n * * api.interceptors.request.use(\n * async (config) => {\n * // const token = localStorage.getItem('token'); // Or get from AuthContext\n * // if (token && !config.headers.Authorization) { // Add only if not already set by AuthContext default\n * //   config.headers.Authorization = `Bearer ${token}`;\n * // }\n * return config;\n * },\n * (error) => {\n * return Promise.reject(error);\n * }\n * );\n */\n\nexport default api;"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAE5E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,OAAO;EAChBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeH,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}