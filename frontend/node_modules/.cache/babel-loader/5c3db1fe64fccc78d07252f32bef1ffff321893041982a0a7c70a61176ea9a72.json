{"ast":null,"code":"var _jsxFileName = \"/Users/harisharan/Desktop/portfolio_py/frontend/src/components/routing/ProtectedRoute.js\",\n  _s = $RefreshSig$();\n// frontend/src/components/routing/ProtectedRoute.js\nimport React from 'react';\nimport { Navigate, Outlet, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext'; // Adjust path as needed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  isAdminRoute = false\n}) => {\n  _s();\n  const {\n    currentUser,\n    isAdmin,\n    isLoadingAuth\n  } = useAuth();\n  const location = useLocation();\n  if (isLoadingAuth) {\n    // Show a loading indicator while auth state is being determined\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-center items-center h-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Loading authentication...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 71\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 12\n    }, this);\n  }\n  if (!currentUser) {\n    // User not logged in, redirect to login page\n    // Pass the current location so we can redirect back after login (optional)\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n  if (isAdminRoute && !isAdmin) {\n    // User is logged in but is not an admin, and this route requires admin\n    // Redirect to homepage or an \"unauthorized\" page\n    // For now, let's redirect to homepage. You can create a specific \"Unauthorized\" page later.\n    console.warn(\"ProtectedRoute: User is not an admin. Redirecting to homepage.\");\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If all checks pass (user logged in, and is admin if required), render the child route/component\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 10\n  }, this); // Outlet renders the nested child route components\n};\n_s(ProtectedRoute, \"bNcp3WCwqZjfZL2PCAyWeJ4cpCc=\", false, function () {\n  return [useAuth, useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","Navigate","Outlet","useLocation","useAuth","jsxDEV","_jsxDEV","ProtectedRoute","isAdminRoute","_s","currentUser","isAdmin","isLoadingAuth","location","className","children","fileName","_jsxFileName","lineNumber","columnNumber","to","state","from","replace","console","warn","_c","$RefreshReg$"],"sources":["/Users/harisharan/Desktop/portfolio_py/frontend/src/components/routing/ProtectedRoute.js"],"sourcesContent":["// frontend/src/components/routing/ProtectedRoute.js\nimport React from 'react';\nimport { Navigate, Outlet, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../contexts/AuthContext'; // Adjust path as needed\n\nconst ProtectedRoute = ({ isAdminRoute = false }) => {\n  const { currentUser, isAdmin, isLoadingAuth } = useAuth();\n  const location = useLocation();\n\n  if (isLoadingAuth) {\n    // Show a loading indicator while auth state is being determined\n    return <div className=\"flex justify-center items-center h-screen\"><div>Loading authentication...</div></div>;\n  }\n\n  if (!currentUser) {\n    // User not logged in, redirect to login page\n    // Pass the current location so we can redirect back after login (optional)\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  if (isAdminRoute && !isAdmin) {\n    // User is logged in but is not an admin, and this route requires admin\n    // Redirect to homepage or an \"unauthorized\" page\n    // For now, let's redirect to homepage. You can create a specific \"Unauthorized\" page later.\n    console.warn(\"ProtectedRoute: User is not an admin. Redirecting to homepage.\");\n    return <Navigate to=\"/\" replace />;\n  }\n\n  // If all checks pass (user logged in, and is admin if required), render the child route/component\n  return <Outlet />; // Outlet renders the nested child route components\n};\n\nexport default ProtectedRoute;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,MAAM,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SAASC,OAAO,QAAQ,4BAA4B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,cAAc,GAAGA,CAAC;EAAEC,YAAY,GAAG;AAAM,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAM;IAAEC,WAAW;IAAEC,OAAO;IAAEC;EAAc,CAAC,GAAGR,OAAO,CAAC,CAAC;EACzD,MAAMS,QAAQ,GAAGV,WAAW,CAAC,CAAC;EAE9B,IAAIS,aAAa,EAAE;IACjB;IACA,oBAAON,OAAA;MAAKQ,SAAS,EAAC,2CAA2C;MAAAC,QAAA,eAACT,OAAA;QAAAS,QAAA,EAAK;MAAyB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC9G;EAEA,IAAI,CAACT,WAAW,EAAE;IAChB;IACA;IACA,oBAAOJ,OAAA,CAACL,QAAQ;MAACmB,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAET;MAAS,CAAE;MAACU,OAAO;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpE;EAEA,IAAIX,YAAY,IAAI,CAACG,OAAO,EAAE;IAC5B;IACA;IACA;IACAa,OAAO,CAACC,IAAI,CAAC,gEAAgE,CAAC;IAC9E,oBAAOnB,OAAA,CAACL,QAAQ;MAACmB,EAAE,EAAC,GAAG;MAACG,OAAO;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpC;;EAEA;EACA,oBAAOb,OAAA,CAACJ,MAAM;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,CAAC,CAAC;AACrB,CAAC;AAACV,EAAA,CAzBIF,cAAc;EAAA,QAC8BH,OAAO,EACtCD,WAAW;AAAA;AAAAuB,EAAA,GAFxBnB,cAAc;AA2BpB,eAAeA,cAAc;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}