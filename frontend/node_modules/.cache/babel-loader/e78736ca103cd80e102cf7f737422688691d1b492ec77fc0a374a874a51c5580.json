{"ast":null,"code":"// portfolio_py/frontend/src/services/certificateService.js\nimport api from './api';\nexport const getCertificates = async () => {\n  try {\n    const response = await api.get('/certificates');\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data, _error$response2;\n    console.error('Error fetching certificates:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message);\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || new Error('Failed to fetch certificates');\n  }\n};\nexport const addCertificate = async formData => {\n  // formData should be a FormData object\n  try {\n    const response = await api.post('/certificates', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data, _error$response4;\n    console.error('Error adding certificate:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || error.message);\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || new Error('Failed to add certificate');\n  }\n};\nexport const deleteCertificate = async id => {\n  try {\n    const response = await api.delete(`/certificates/${id}`);\n    return response.data;\n  } catch (error) {\n    var _error$response5, _error$response5$data, _error$response6;\n    console.error('Error deleting certificate:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || error.message);\n    throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || new Error('Failed to delete certificate');\n  }\n};\n\n// TODO: \nexport const updateCertificate = async (id, formData) => {\n  // formData should be a FormData object\n  try {\n    const response = await api.put(`/certificates/${id}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response7, _error$response7$data, _error$response8;\n    console.error('Error updating certificate:', ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || error.message);\n    throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || new Error('Failed to update certificate');\n  }\n}; // export const updateCertificate = async (id, formData) => { ... }","map":{"version":3,"names":["api","getCertificates","response","get","data","error","_error$response","_error$response$data","_error$response2","console","message","Error","addCertificate","formData","post","headers","_error$response3","_error$response3$data","_error$response4","deleteCertificate","id","delete","_error$response5","_error$response5$data","_error$response6","updateCertificate","put","_error$response7","_error$response7$data","_error$response8"],"sources":["/Users/harisharan/Desktop/portfolio_copy/frontend/src/services/certificateService.js"],"sourcesContent":["// portfolio_py/frontend/src/services/certificateService.js\nimport api from './api';\n\nexport const getCertificates = async () => {\n  try {\n    const response = await api.get('/certificates');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching certificates:', error.response?.data?.message || error.message);\n    throw error.response?.data || new Error('Failed to fetch certificates');\n  }\n};\n\nexport const addCertificate = async (formData) => {\n  // formData should be a FormData object\n  try {\n    const response = await api.post('/certificates', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error adding certificate:', error.response?.data?.message || error.message);\n    throw error.response?.data || new Error('Failed to add certificate');\n  }\n};\n\nexport const deleteCertificate = async (id) => {\n  try {\n    const response = await api.delete(`/certificates/${id}`);\n    return response.data;\n  } catch (error) {\n    console.error('Error deleting certificate:', error.response?.data?.message || error.message);\n    throw error.response?.data || new Error('Failed to delete certificate');\n  }\n};\n\n// TODO: \nexport const updateCertificate = async (id, formData) => {\n  // formData should be a FormData object\n  try {\n    const response = await api.put(`/certificates/${id}`, formData, {\n        headers: {\n            'Content-Type': 'multipart/form-data',\n        },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error updating certificate:', error.response?.data?.message || error.message);\n    throw error.response?.data || new Error('Failed to update certificate');\n  }\n};// export const updateCertificate = async (id, formData) => { ... }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}