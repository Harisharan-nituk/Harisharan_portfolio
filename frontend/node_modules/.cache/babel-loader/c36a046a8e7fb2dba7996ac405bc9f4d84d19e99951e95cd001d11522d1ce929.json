{"ast":null,"code":"// frontend/src/services/skillService.js\nimport api from './api'; // This imports your configured Axios instance from api.js in the same folder\n\n// Renamed and updated to fetch from the correct endpoint\nexport const getSkillCategories = async () => {\n  try {\n    // Calls GET http://localhost:5001/api/skillcategories\n    const response = await api.get('/skillcategories');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching skill categories:', error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : new Error('Failed to fetch skill categories');\n  }\n};\n\n// This updateSkill function is for the OLD /api/skills structure.\n// It will NOT work correctly with your /api/skillcategories backend for editing individual skills\n// unless your backend has a specific /api/skills/:id route for that.\n// We will need to redefine how skills are updated within categories later.\nexport const updateSkill = async (skillId, skillData) => {\n  try {\n    console.warn(\"Attempting to use updateSkill for a flat skill structure. This may not align with the category-based backend. Endpoint: /skills/:id\");\n    const response = await api.put(`/skills/${skillId}`, skillData); // This still points to /skills/:id\n    return response.data;\n  } catch (error) {\n    console.error('Error updating skill (flat structure):', error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : new Error('Failed to update skill (flat structure)');\n  }\n};\n\n// TODO: Add new service functions for category and skill-in-category CRUD operations, e.g.:\n// --- ADD THIS FUNCTION ---\nexport const addSkillCategory = async categoryData => {\n  try {\n    // categoryData should be an object like { name: \"New Category Name\" }\n    // The backend should respond with the newly created category object\n    const response = await api.post('/skillcategories', categoryData);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding skill category:', error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : new Error('Failed to add skill category');\n  }\n};\nexport const updateSkillCategory = async (categoryId, categoryData) => {\n  try {\n    // categoryData should be an object like { name: \"Updated Category Name\" }\n    // The backend should respond with the updated category object\n    const response = await api.put(`/skillcategories/${categoryId}`, categoryData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating skill category:', error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : new Error('Failed to update skill category');\n  }\n};\n// --- ADD THIS FUNCTION ---\nexport const addSkillToCategory = async (categoryId, skillData) => {\n  try {\n    // skillData could be { name: \"Skill Name\", description: \"Optional description\" }\n    // Backend should return the updated category with the new skill, or just the new skill object\n    // For simplicity, we'll assume backend returns the updated category object or at least the new skill with an _id\n    const response = await api.post(`/skillcategories/${categoryId}/skills`, skillData);\n    return response.data; // This might be the new skill object or the whole updated category\n  } catch (error) {\n    console.error(`Error adding skill to category ${categoryId}:`, error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : new Error('Failed to add skill to category');\n  }\n};\nconst deleteSkillFromCategory = async (categoryId, skillId) => {\n  try {\n    // Assumes backend expects DELETE /api/skillcategories/:categoryId/skills/:skillId\n    // And might return a success message or just a 200/204 status.\n    const response = await api.delete(`/skillcategories/${categoryId}/skills/${skillId}`);\n    return response.data; // Or handle based on what your backend returns (e.g., status code)\n  } catch (error) {\n    console.error(`Error deleting skill ${skillId} from category ${categoryId}:`, error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : new Error('Failed to delete skill from category');\n  }\n};\n// --- END\n// --- END OF ADDED FUNCTION ---\n// etc.","map":{"version":3,"names":["api","getSkillCategories","response","get","data","error","console","message","Error","updateSkill","skillId","skillData","warn","put","addSkillCategory","categoryData","post","updateSkillCategory","categoryId","addSkillToCategory","deleteSkillFromCategory","delete"],"sources":["/Users/harisharan/Desktop/portfolio_py/frontend/src/services/skillService.js"],"sourcesContent":["// frontend/src/services/skillService.js\nimport api from './api'; // This imports your configured Axios instance from api.js in the same folder\n\n// Renamed and updated to fetch from the correct endpoint\nexport const getSkillCategories = async () => {\n  try {\n    // Calls GET http://localhost:5001/api/skillcategories\n    const response = await api.get('/skillcategories');\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching skill categories:', error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : new Error('Failed to fetch skill categories');\n  }\n};\n\n// This updateSkill function is for the OLD /api/skills structure.\n// It will NOT work correctly with your /api/skillcategories backend for editing individual skills\n// unless your backend has a specific /api/skills/:id route for that.\n// We will need to redefine how skills are updated within categories later.\nexport const updateSkill = async (skillId, skillData) => {\n  try {\n    console.warn(\"Attempting to use updateSkill for a flat skill structure. This may not align with the category-based backend. Endpoint: /skills/:id\");\n    const response = await api.put(`/skills/${skillId}`, skillData); // This still points to /skills/:id\n    return response.data;\n  } catch (error) {\n    console.error('Error updating skill (flat structure):', error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : new Error('Failed to update skill (flat structure)');\n  }\n};\n\n// TODO: Add new service functions for category and skill-in-category CRUD operations, e.g.:\n// --- ADD THIS FUNCTION ---\nexport const addSkillCategory = async (categoryData) => {\n  try {\n    // categoryData should be an object like { name: \"New Category Name\" }\n    // The backend should respond with the newly created category object\n    const response = await api.post('/skillcategories', categoryData);\n    return response.data;\n  } catch (error) {\n    console.error('Error adding skill category:', error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : new Error('Failed to add skill category');\n  }\n};\nexport const updateSkillCategory = async (categoryId, categoryData) => {\n  try {\n    // categoryData should be an object like { name: \"Updated Category Name\" }\n    // The backend should respond with the updated category object\n    const response = await api.put(`/skillcategories/${categoryId}`, categoryData);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating skill category:', error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : new Error('Failed to update skill category');\n  }\n};\n// --- ADD THIS FUNCTION ---\nexport const addSkillToCategory = async (categoryId, skillData) => {\n  try {\n    // skillData could be { name: \"Skill Name\", description: \"Optional description\" }\n    // Backend should return the updated category with the new skill, or just the new skill object\n    // For simplicity, we'll assume backend returns the updated category object or at least the new skill with an _id\n    const response = await api.post(`/skillcategories/${categoryId}/skills`, skillData);\n    return response.data; // This might be the new skill object or the whole updated category\n  } catch (error) {\n    console.error(`Error adding skill to category ${categoryId}:`, error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : new Error('Failed to add skill to category');\n  }\n};\nconst deleteSkillFromCategory = async (categoryId, skillId) => {\n  try {\n    // Assumes backend expects DELETE /api/skillcategories/:categoryId/skills/:skillId\n    // And might return a success message or just a 200/204 status.\n    const response = await api.delete(`/skillcategories/${categoryId}/skills/${skillId}`);\n    return response.data; // Or handle based on what your backend returns (e.g., status code)\n  } catch (error) {\n    console.error(`Error deleting skill ${skillId} from category ${categoryId}:`, error.response ? error.response.data : error.message);\n    throw error.response ? error.response.data : new Error('Failed to delete skill from category');\n  }\n};\n// --- END\n// --- END OF ADDED FUNCTION ---\n// etc."],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}